#!/usr/bin/env bash

PROJECT_NAME=cbap

function actually_perform_test ()
{
  file="$1"
  args="$2"

  if test -x "${file}"
  then
    ./"${file}" ${args}
    if test 0 -ne $?
    then
      echo "Failed test: ${file} ${args}"
      return 1
    fi
  else
    echo "File doesn't exist: ${file}"
    return 1
  fi
}


# Run the tests and count failed tests.
function run_tests ()
{
  x=0

  file="./tests/bin/cbap_register_error_test"
  args=""
  actually_perform_test "${file}" "${args}"
  if test 0 -ne $?
  then
    x=$((x+=1))
  fi

  file="./tests/bin/cbap_inputs_detection"
  args="help doing done ---- -- -- ---- doing help done"
  actually_perform_test "${file}" "${args}"
  if test 0 -ne $?
  then
    x=$((x+=1))
  fi

  file="./tests/bin/cbap_unknown_argument_detection"
  args="help doing done ---- HELP DOING DONE ------ -- -- ---- doing help done"
  actually_perform_test "${file}" "${args}"
  if test 0 -ne $?
  then
    x=$((x+=1))
  fi

  file="./tests/bin/cbap_callback_trigger"
  args="help -help --help HELP --HELP count -count --count CoUnT -COUNT --COunt"
  actually_perform_test "${file}" "${args}"
  if test 0 -ne $?
  then
    x=$((x+=1))
  fi

  file="./tests/bin/cbap_variable_detection"
  args="help insensitive insensitive=TruE --SENSITIVE=true -- sensitive"
  actually_perform_test "${file}" "${args}"
  if test 0 -ne $?
  then
    x=$((x+=1))
  fi

  echo "Number of failed tests: $x"
}

# Build the library
function make ()
{
  gprbuild -p ${PROJECT_NAME}.gpr
  echo ""
}

# Build the tests
function make_tests
{
  gprbuild -p ${PROJECT_NAME}-tests.gpr
  echo ""
}

# Clean up built files
function clean
{
  gprclean ${PROJECT_NAME}.gpr
  gprclean ${PROJECT_NAME}-tests.gpr
}

if test $# -eq 0
then
  echo "No valid argument specified"
  echo ""
  echo "./make.sh ${PROJECT_NAME} to build library only"
  echo "./make.sh check     to build tests and run them"
  echo "./make.sh all       to build library, tests and run the tests"
  echo "./make.sh clean     to clean up files generated by build process"
  exit 0
fi

if test $1 = ${PROJECT_NAME}
then
  make
elif test $1 = "check"
then
  make_tests
  run_tests
elif test $1 = "all"
then
  clean
  make
  make_tests
  run_tests
elif test $1 = "clean"
then
  clean
fi
